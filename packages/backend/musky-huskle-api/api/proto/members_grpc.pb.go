// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/proto/members.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MembersService_GetMembers_FullMethodName   = "/members_service.MembersService/GetMembers"
	MembersService_CreateMember_FullMethodName = "/members_service.MembersService/CreateMember"
)

// MembersServiceClient is the client API for MembersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersServiceClient interface {
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
	CreateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Empty, error)
}

type membersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersServiceClient(cc grpc.ClientConnInterface) MembersServiceClient {
	return &membersServiceClient{cc}
}

func (c *membersServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, MembersService_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) CreateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MembersService_CreateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServiceServer is the server API for MembersService service.
// All implementations must embed UnimplementedMembersServiceServer
// for forward compatibility
type MembersServiceServer interface {
	GetMembers(context.Context, *GetMembersRequest) (*MembersResponse, error)
	CreateMember(context.Context, *Member) (*Empty, error)
	mustEmbedUnimplementedMembersServiceServer()
}

// UnimplementedMembersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMembersServiceServer struct {
}

func (UnimplementedMembersServiceServer) GetMembers(context.Context, *GetMembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedMembersServiceServer) CreateMember(context.Context, *Member) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMembersServiceServer) mustEmbedUnimplementedMembersServiceServer() {}

// UnsafeMembersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServiceServer will
// result in compilation errors.
type UnsafeMembersServiceServer interface {
	mustEmbedUnimplementedMembersServiceServer()
}

func RegisterMembersServiceServer(s grpc.ServiceRegistrar, srv MembersServiceServer) {
	s.RegisterService(&MembersService_ServiceDesc, srv)
}

func _MembersService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MembersService_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MembersService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).CreateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

// MembersService_ServiceDesc is the grpc.ServiceDesc for MembersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MembersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "members_service.MembersService",
	HandlerType: (*MembersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _MembersService_GetMembers_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _MembersService_CreateMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/members.proto",
}
