// Code generated by mockery v2.43.2. DO NOT EDIT.

package muskyhuskle

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTime is an autogenerated mock type for the Time type
type MockTime struct {
	mock.Mock
}

type MockTime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTime) EXPECT() *MockTime_Expecter {
	return &MockTime_Expecter{mock: &_m.Mock}
}

// Date provides a mock function with given fields: year, month, day, hour, min, sec, nsec, loc
func (_m *MockTime) Date(year int, month time.Month, day int, hour int, min int, sec int, nsec int, loc *time.Location) time.Time {
	ret := _m.Called(year, month, day, hour, min, sec, nsec, loc)

	if len(ret) == 0 {
		panic("no return value specified for Date")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(int, time.Month, int, int, int, int, int, *time.Location) time.Time); ok {
		r0 = rf(year, month, day, hour, min, sec, nsec, loc)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTime_Date_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Date'
type MockTime_Date_Call struct {
	*mock.Call
}

// Date is a helper method to define mock.On call
//   - year int
//   - month time.Month
//   - day int
//   - hour int
//   - min int
//   - sec int
//   - nsec int
//   - loc *time.Location
func (_e *MockTime_Expecter) Date(year interface{}, month interface{}, day interface{}, hour interface{}, min interface{}, sec interface{}, nsec interface{}, loc interface{}) *MockTime_Date_Call {
	return &MockTime_Date_Call{Call: _e.mock.On("Date", year, month, day, hour, min, sec, nsec, loc)}
}

func (_c *MockTime_Date_Call) Run(run func(year int, month time.Month, day int, hour int, min int, sec int, nsec int, loc *time.Location)) *MockTime_Date_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(time.Month), args[2].(int), args[3].(int), args[4].(int), args[5].(int), args[6].(int), args[7].(*time.Location))
	})
	return _c
}

func (_c *MockTime_Date_Call) Return(_a0 time.Time) *MockTime_Date_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTime_Date_Call) RunAndReturn(run func(int, time.Month, int, int, int, int, int, *time.Location) time.Time) *MockTime_Date_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimer provides a mock function with given fields: d
func (_m *MockTime) NewTimer(d time.Duration) *time.Timer {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for NewTimer")
	}

	var r0 *time.Timer
	if rf, ok := ret.Get(0).(func(time.Duration) *time.Timer); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Timer)
		}
	}

	return r0
}

// MockTime_NewTimer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTimer'
type MockTime_NewTimer_Call struct {
	*mock.Call
}

// NewTimer is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockTime_Expecter) NewTimer(d interface{}) *MockTime_NewTimer_Call {
	return &MockTime_NewTimer_Call{Call: _e.mock.On("NewTimer", d)}
}

func (_c *MockTime_NewTimer_Call) Run(run func(d time.Duration)) *MockTime_NewTimer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockTime_NewTimer_Call) Return(_a0 *time.Timer) *MockTime_NewTimer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTime_NewTimer_Call) RunAndReturn(run func(time.Duration) *time.Timer) *MockTime_NewTimer_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with given fields:
func (_m *MockTime) Now() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTime_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockTime_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockTime_Expecter) Now() *MockTime_Now_Call {
	return &MockTime_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockTime_Now_Call) Run(run func()) *MockTime_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTime_Now_Call) Return(_a0 time.Time) *MockTime_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTime_Now_Call) RunAndReturn(run func() time.Time) *MockTime_Now_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTime creates a new instance of MockTime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTime(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTime {
	mock := &MockTime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
