// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "api/proto/members.proto" (package "members_service", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MembersService } from "./members";
import type { Empty } from "./members";
import type { Member } from "./members";
import type { MemberResponse } from "./members";
import type { GetMemberRequest } from "./members";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PingResponse } from "./members";
import type { PingRequest } from "./members";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service members_service.MembersService
 */
export interface IMembersServiceClient {
    /**
     * @generated from protobuf rpc: Ping(members_service.PingRequest) returns (members_service.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse>;
    /**
     * @generated from protobuf rpc: GetMembers(members_service.GetMemberRequest) returns (members_service.MemberResponse);
     */
    getMembers(input: GetMemberRequest, options?: RpcOptions): UnaryCall<GetMemberRequest, MemberResponse>;
    /**
     * @generated from protobuf rpc: CreateMember(members_service.Member) returns (members_service.Empty);
     */
    createMember(input: Member, options?: RpcOptions): UnaryCall<Member, Empty>;
    /**
     * @generated from protobuf rpc: UpdateMember(members_service.Member) returns (members_service.Empty);
     */
    updateMember(input: Member, options?: RpcOptions): UnaryCall<Member, Empty>;
    /**
     * @generated from protobuf rpc: DeleteMember(members_service.Member) returns (members_service.Empty);
     */
    deleteMember(input: Member, options?: RpcOptions): UnaryCall<Member, Empty>;
}
/**
 * @generated from protobuf service members_service.MembersService
 */
export class MembersServiceClient implements IMembersServiceClient, ServiceInfo {
    typeName = MembersService.typeName;
    methods = MembersService.methods;
    options = MembersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Ping(members_service.PingRequest) returns (members_service.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingRequest, PingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMembers(members_service.GetMemberRequest) returns (members_service.MemberResponse);
     */
    getMembers(input: GetMemberRequest, options?: RpcOptions): UnaryCall<GetMemberRequest, MemberResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMemberRequest, MemberResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateMember(members_service.Member) returns (members_service.Empty);
     */
    createMember(input: Member, options?: RpcOptions): UnaryCall<Member, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Member, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateMember(members_service.Member) returns (members_service.Empty);
     */
    updateMember(input: Member, options?: RpcOptions): UnaryCall<Member, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Member, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteMember(members_service.Member) returns (members_service.Empty);
     */
    deleteMember(input: Member, options?: RpcOptions): UnaryCall<Member, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Member, Empty>("unary", this._transport, method, opt, input);
    }
}
