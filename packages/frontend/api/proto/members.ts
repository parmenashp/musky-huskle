// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "api/proto/members.proto" (package "members_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message members_service.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message members_service.PingRequest
 */
export interface PingRequest {
}
/**
 * @generated from protobuf message members_service.PingResponse
 */
export interface PingResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message members_service.GetMemberRequest
 */
export interface GetMemberRequest {
    /**
     * @generated from protobuf field: string member_name = 1;
     */
    memberName: string;
}
/**
 * @generated from protobuf message members_service.CategoryValue
 */
export interface CategoryValue {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
}
/**
 * @generated from protobuf message members_service.Member
 */
export interface Member {
    /**
     * @generated from protobuf field: string genre_identity = 1;
     */
    genreIdentity: string;
    /**
     * @generated from protobuf field: uint32 age = 2;
     */
    age: number;
    /**
     * @generated from protobuf field: string fursona_species = 3;
     */
    fursonaSpecies: string;
    /**
     * @generated from protobuf field: string color = 4;
     */
    color: string;
    /**
     * @generated from protobuf field: string occupation = 5;
     */
    occupation: string;
    /**
     * @generated from protobuf field: string sexuality = 6;
     */
    sexuality: string;
    /**
     * @generated from protobuf field: string sign = 7;
     */
    sign: string;
    /**
     * @generated from protobuf field: uint32 member_since = 8;
     */
    memberSince: number;
    /**
     * @generated from protobuf field: string birth_date = 9;
     */
    birthDate: string;
    /**
     * @generated from protobuf field: string avatar_url = 10;
     */
    avatarUrl: string;
    /**
     * @generated from protobuf field: string name = 11;
     */
    name: string;
}
/**
 * @generated from protobuf message members_service.MemberResponse
 */
export interface MemberResponse {
    /**
     * @generated from protobuf field: members_service.CategoryValue genre_identity = 1;
     */
    genreIdentity?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue age = 2;
     */
    age?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue fursona_species = 3;
     */
    fursonaSpecies?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue color = 4;
     */
    color?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue occupation = 5;
     */
    occupation?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue sexuality = 6;
     */
    sexuality?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue sign = 7;
     */
    sign?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue member_since = 8;
     */
    memberSince?: CategoryValue;
    /**
     * @generated from protobuf field: members_service.CategoryValue birth_date = 9;
     */
    birthDate?: CategoryValue;
    /**
     * @generated from protobuf field: string avatar_url = 10;
     */
    avatarUrl: string;
    /**
     * @generated from protobuf field: string name = 11;
     */
    name: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("members_service.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends MessageType<PingRequest> {
    constructor() {
        super("members_service.PingRequest", []);
    }
    create(value?: PartialMessage<PingRequest>): PingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRequest): PingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.PingRequest
 */
export const PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends MessageType<PingResponse> {
    constructor() {
        super("members_service.PingResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingResponse>): PingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingResponse): PingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.PingResponse
 */
export const PingResponse = new PingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMemberRequest$Type extends MessageType<GetMemberRequest> {
    constructor() {
        super("members_service.GetMemberRequest", [
            { no: 1, name: "member_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMemberRequest>): GetMemberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.memberName = "";
        if (value !== undefined)
            reflectionMergePartial<GetMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMemberRequest): GetMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string member_name */ 1:
                    message.memberName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string member_name = 1; */
        if (message.memberName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.memberName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.GetMemberRequest
 */
export const GetMemberRequest = new GetMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryValue$Type extends MessageType<CategoryValue> {
    constructor() {
        super("members_service.CategoryValue", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryValue>): CategoryValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<CategoryValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryValue): CategoryValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.CategoryValue
 */
export const CategoryValue = new CategoryValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Member$Type extends MessageType<Member> {
    constructor() {
        super("members_service.Member", [
            { no: 1, name: "genre_identity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "age", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "fursona_species", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "occupation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sexuality", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "member_since", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "birth_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Member>): Member {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.genreIdentity = "";
        message.age = 0;
        message.fursonaSpecies = "";
        message.color = "";
        message.occupation = "";
        message.sexuality = "";
        message.sign = "";
        message.memberSince = 0;
        message.birthDate = "";
        message.avatarUrl = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<Member>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Member): Member {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string genre_identity */ 1:
                    message.genreIdentity = reader.string();
                    break;
                case /* uint32 age */ 2:
                    message.age = reader.uint32();
                    break;
                case /* string fursona_species */ 3:
                    message.fursonaSpecies = reader.string();
                    break;
                case /* string color */ 4:
                    message.color = reader.string();
                    break;
                case /* string occupation */ 5:
                    message.occupation = reader.string();
                    break;
                case /* string sexuality */ 6:
                    message.sexuality = reader.string();
                    break;
                case /* string sign */ 7:
                    message.sign = reader.string();
                    break;
                case /* uint32 member_since */ 8:
                    message.memberSince = reader.uint32();
                    break;
                case /* string birth_date */ 9:
                    message.birthDate = reader.string();
                    break;
                case /* string avatar_url */ 10:
                    message.avatarUrl = reader.string();
                    break;
                case /* string name */ 11:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Member, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string genre_identity = 1; */
        if (message.genreIdentity !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.genreIdentity);
        /* uint32 age = 2; */
        if (message.age !== 0)
            writer.tag(2, WireType.Varint).uint32(message.age);
        /* string fursona_species = 3; */
        if (message.fursonaSpecies !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fursonaSpecies);
        /* string color = 4; */
        if (message.color !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.color);
        /* string occupation = 5; */
        if (message.occupation !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.occupation);
        /* string sexuality = 6; */
        if (message.sexuality !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.sexuality);
        /* string sign = 7; */
        if (message.sign !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.sign);
        /* uint32 member_since = 8; */
        if (message.memberSince !== 0)
            writer.tag(8, WireType.Varint).uint32(message.memberSince);
        /* string birth_date = 9; */
        if (message.birthDate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.birthDate);
        /* string avatar_url = 10; */
        if (message.avatarUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.avatarUrl);
        /* string name = 11; */
        if (message.name !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.Member
 */
export const Member = new Member$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemberResponse$Type extends MessageType<MemberResponse> {
    constructor() {
        super("members_service.MemberResponse", [
            { no: 1, name: "genre_identity", kind: "message", T: () => CategoryValue },
            { no: 2, name: "age", kind: "message", T: () => CategoryValue },
            { no: 3, name: "fursona_species", kind: "message", T: () => CategoryValue },
            { no: 4, name: "color", kind: "message", T: () => CategoryValue },
            { no: 5, name: "occupation", kind: "message", T: () => CategoryValue },
            { no: 6, name: "sexuality", kind: "message", T: () => CategoryValue },
            { no: 7, name: "sign", kind: "message", T: () => CategoryValue },
            { no: 8, name: "member_since", kind: "message", T: () => CategoryValue },
            { no: 9, name: "birth_date", kind: "message", T: () => CategoryValue },
            { no: 10, name: "avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MemberResponse>): MemberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.avatarUrl = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<MemberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberResponse): MemberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* members_service.CategoryValue genre_identity */ 1:
                    message.genreIdentity = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.genreIdentity);
                    break;
                case /* members_service.CategoryValue age */ 2:
                    message.age = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.age);
                    break;
                case /* members_service.CategoryValue fursona_species */ 3:
                    message.fursonaSpecies = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.fursonaSpecies);
                    break;
                case /* members_service.CategoryValue color */ 4:
                    message.color = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                case /* members_service.CategoryValue occupation */ 5:
                    message.occupation = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.occupation);
                    break;
                case /* members_service.CategoryValue sexuality */ 6:
                    message.sexuality = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.sexuality);
                    break;
                case /* members_service.CategoryValue sign */ 7:
                    message.sign = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.sign);
                    break;
                case /* members_service.CategoryValue member_since */ 8:
                    message.memberSince = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.memberSince);
                    break;
                case /* members_service.CategoryValue birth_date */ 9:
                    message.birthDate = CategoryValue.internalBinaryRead(reader, reader.uint32(), options, message.birthDate);
                    break;
                case /* string avatar_url */ 10:
                    message.avatarUrl = reader.string();
                    break;
                case /* string name */ 11:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* members_service.CategoryValue genre_identity = 1; */
        if (message.genreIdentity)
            CategoryValue.internalBinaryWrite(message.genreIdentity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue age = 2; */
        if (message.age)
            CategoryValue.internalBinaryWrite(message.age, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue fursona_species = 3; */
        if (message.fursonaSpecies)
            CategoryValue.internalBinaryWrite(message.fursonaSpecies, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue color = 4; */
        if (message.color)
            CategoryValue.internalBinaryWrite(message.color, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue occupation = 5; */
        if (message.occupation)
            CategoryValue.internalBinaryWrite(message.occupation, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue sexuality = 6; */
        if (message.sexuality)
            CategoryValue.internalBinaryWrite(message.sexuality, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue sign = 7; */
        if (message.sign)
            CategoryValue.internalBinaryWrite(message.sign, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue member_since = 8; */
        if (message.memberSince)
            CategoryValue.internalBinaryWrite(message.memberSince, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* members_service.CategoryValue birth_date = 9; */
        if (message.birthDate)
            CategoryValue.internalBinaryWrite(message.birthDate, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string avatar_url = 10; */
        if (message.avatarUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.avatarUrl);
        /* string name = 11; */
        if (message.name !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message members_service.MemberResponse
 */
export const MemberResponse = new MemberResponse$Type();
/**
 * @generated ServiceType for protobuf service members_service.MembersService
 */
export const MembersService = new ServiceType("members_service.MembersService", [
    { name: "Ping", options: {}, I: PingRequest, O: PingResponse },
    { name: "GetMembers", options: {}, I: GetMemberRequest, O: MemberResponse },
    { name: "CreateMember", options: {}, I: Member, O: Empty },
    { name: "UpdateMember", options: {}, I: Member, O: Empty },
    { name: "DeleteMember", options: {}, I: Member, O: Empty }
]);
